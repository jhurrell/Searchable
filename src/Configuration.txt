// Creating a search builder where all supported property types on the Person and all the operators 
// for those types will be available for building search conditions.
public class SearchBuilder<Person>
{
	public SearchBuilder()
	{
	}
}

// Creating a search builder for Person but only supporting EqualTo and BeginsWith on the Name
// property and IsOneOf and IsNotOneOf on the DateOfBirthProperty.
public class SearchBuilder<Person>
{
	public SearchBuilder()
	{
		AddProperty(x => x.Name)
			.WithOperator(StringOperators.EqualTo)
			.WithOperator(StringOperators.BeginsWith);

		AddProperty(x => x.DateOfBirth)
			.WithoutOperator(CommonOperators.IsOneOf)
			.WithoutOperator(CommonOperators.IsNotOneOf);
	}
}

// Creating a search builder for Person supporting all properties and all operators but excluding
// the SSN property.
public class SearchBuilder<Person>
{
	public SearchBuilder()
	{
		RemoveProperty(x => x.SSN);
	}
}

// Creating a search builder for Person supporting all properties and all operators but only 
// including the EqualTo and BeginsWith operators for the Name property.
public class SearchBuilder<Person>
{
	public SearchBuilder()
	{
		ForProperty(x => x.Name)
			.WithOperator(StringOperators.EqualTo)
			.WithOperator(StringOperators.BeginsWith);
	}
}

// Creating a search builder for Person supporting all properties and all operators and specify
// a source class implementing ITBD to supply values for the FavoriteColors IEnumerable.
public class SearchBuilder<Person>
{
	public SearchBuilder()
	{
		ForProperty(x => x.FavoriteColors)
			.WithLookupSource(new ColorsList());
	}
}

// Create a search builder where all supported property types on the Person are available for 
// building search conditions except for the Contains operator which is removed for all string types.
public class SearchBuilder<Person>
{
	public SearchBuilder()
	{
		ExcludeOperator<string>(StringOperators.Contains);
	}
}
