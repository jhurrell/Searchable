public class Searchable<Person>
{
	public Searchable()
	{
		// Supports searching on Name using all available operators.
		CanSearch(x => x.Name);

		// Supports searching on SpouseName using all available operators and the
		// property will display as "Spouse Name".
		CanSearch(x => x.SpouseName, "Spouse Name");

		// Supports searching on Title using only the EqualTo and NotEqualTo operators.
		CanSearch(x => x.Title)
			.Include(StringOperators.EqualTo)
			.Include(StringOperators.NotEqualTo);

		// Supports searching on Age using all operators except for IsOneOf and IsNotOneOf.
		CanSearch(x => x.Age)
			.Exclude(NumericOperators.IsOneOf)
			.Exclude(NumericOperators.IsNotOneOf);

		// Supports searching on FavoriteColors collection where the list of q using all operators except for IsOneOf and IsNotOneOf.
		CanSearch(x => x.FavoriteColors)
			.LookupSource(ColorSources)
			.Include(CollectionOperators.ContainsOneOf)
			.Include(CollectionOperators.ContainsNoneOf);
	}
}

var searchable = new Searchable<Person>();

// The available properties to be searched plus the operators supported are defined in
// the constructor and are either defaults or those specifically included/excluded
// at design time.
IEnumerable<Property> = searchable.Properties;
IEnumerable<Operators> = searchable["FirstName"].Operators;
BaseOperator = searchable["FirstName"]["Equals"];

searchable.Conditions = IEnumerable<Condition>
searchable.AddCondition(string propertyName, string operatorName, params values)
searchable.AddCondition(string propertyName, string operatorName, object[] values)
searchable.AddCondition(string propertyName, Operators operator, params values)
searchable.AddCondition(string propertyName, Operators operator, object[] values)

                        Bol   Num   Dat   Str   Col
IsTrue                  X
IsFalse                 X
HasValue                X     X     X     X  
DoesNotHaveValue        X     X     X     X
EqualTo                       X     X     X
NotEqualTo                    X     X     X
GreaterThan                   X     X     X
LessThan                      X     X     X
GreaterThanOrEqualTo          X     X     X
LessThanOrEqualTo             X     X     X
IsOneOf                       X     X     X     
IsNotOneOf                    X     X     X
Between                       X     X     X
BeginsWith                                X
EndsWith                                  X
Contains                                  X 
DoesNotContain                            X
IsEmpty                                         X
IsNotEmpty                                      X
ContainsOneOf                                   X
ContainsNoneOf                                  X
ContainsAllOf                                   X    



References:
http://stackoverflow.com/questions/15099128/dynamically-return-interface-at-design-time
http://stackoverflow.com/questions/218024/fluent-interfaces-in-c-sharp?rq=1
http://stackoverflow.com/questions/1464737/hiding-gethashcode-equals-tostring-from-fluent-interface-classes-intellisense-in

http://andrevianna.com/blog/index.php/2010/08/guidelines-to-fluent-interface-design-in-c-part-1/
http://andrevianna.com/blog/index.php/2010/08/guidelines-to-fluent-interface-design-in-c-part-2/
http://andrevianna.com/blog/index.php/2010/08/guidelines-to-fluent-interface-design-in-c-part-3/


